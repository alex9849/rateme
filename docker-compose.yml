version: '3.0'

services:
  db:
    container_name: ratemeDb
    build:
      context: ./dockerDB
      dockerfile: Dockerfile
    volumes:
    - ./dockerDB/DbVolume:/var/lib/mysql
    - ./dockerDB/DbConfig:/etc/mysql/conf.d
    environment:
    - MYSQL_DATABASE=osm01
    - MYSQL_ALLOW_EMPTY_PASSWORD=true
    ports:
    - 3306:3306
  app:
    container_name: ratemeApp
    build:
      context: ./
      dockerfile: dockerApp/Dockerfile
    environment:
      DB_NAME: osm01
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: root
      DB_PW: ''
      KAFKA_HOST: kafka
      KAFKA_PORT: 29092
      KAFKA_TOPIC: rating
      VIRTUAL_HOST: rateme.liggesmeyer.net
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: rateme.liggesmeyer.net
    depends_on:
      - db
      - kafka
    ports:
    - 9080:9080
    - 9443:9443
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    container_name: sn-zookeeper
  kafka:
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    container_name: sn-kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1



#  nginx-proxy:
#    image: jwilder/nginx-proxy
#    restart: always
#    ports:
#      - 80:80
#      - 443:443
#    volumes:
#      - /var/run/docker.sock:/tmp/docker.sock:ro
#      - ./proxyData/certs:/etc/nginx/certs
#      - ./proxyData/vhost.d:/etc/nginx/vhost.d
#      - ./proxyData/html:/usr/share/nginx/html
#    nginx-proxy-companion:
#      image: jrcs/letsencrypt-nginx-proxy-companion
#      restart: always
#      volumes:
#        - /var/run/docker.sock:/var/run/docker.sock:ro
#      volumes_from:
#        - nginx-proxy
#      networks:
#        - reverse_proxy_net